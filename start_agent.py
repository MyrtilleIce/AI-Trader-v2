#!/usr/bin/env python3
"""
Script de lancement intelligent pour AI-Trader-v2
Avec v√©rifications pr√©alables et gestion d'erreurs
"""

import sys
import os
import subprocess
import importlib
import argparse
from pathlib import Path

def verify_dependencies():
    """V√©rifier les d√©pendances avant le lancement"""
    required_modules = ['pandas', 'flask', 'yaml', 'requests', 'ccxt']
    
    missing = []
    for module in required_modules:
        try:
            if module == 'yaml':
                importlib.import_module('yaml')
            else:
                importlib.import_module(module)
        except ImportError:
            missing.append(module)
    
    if missing:
        print(f"‚ùå Modules manquants: {', '.join(missing)}")
        print("üí° Lancez d'abord: python3 install_dependencies.py")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont disponibles")
    return True

def check_agent_structure():
    """V√©rifier que l'agent peut √™tre lanc√©"""
    if not os.path.exists('ai_trader'):
        print("‚ùå Dossier ai_trader non trouv√©")
        print("üí° Assurez-vous d'√™tre dans le bon r√©pertoire")
        return False
    
    if not os.path.exists('ai_trader/main.py'):
        print("‚ùå ai_trader/main.py non trouv√©")
        return False
    
    if not os.path.exists('ai_trader/__init__.py'):
        print("‚ùå ai_trader/__init__.py non trouv√©")
        return False
    
    print("‚úÖ Structure de l'agent correcte")
    return True

def start_agent(enable_dashboard: bool = False) -> bool:
    """Lancer l'agent AI-Trader."""
    print("üöÄ LANCEMENT AI-TRADER-V2")
    print("=" * 40)

    if not verify_dependencies():
        return False

    if not check_agent_structure():
        return False

    print("üéØ D√©marrage de l'agent...")
    try:
        cmd = [sys.executable, '-m', 'ai_trader.main']
        print(f"Commande: {' '.join(cmd)}")

        env = os.environ.copy()
        if enable_dashboard:
            env["ENABLE_DASHBOARD"] = "true"

        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1,
            env=env,
        )

        print("‚úÖ Agent d√©marr√© !")
        if enable_dashboard:
            port = env.get("DASHBOARD_PORT", "5000")
            print(f"üìä Dashboard disponible sur: http://localhost:{port}")
        print("üì± Contr√¥le Telegram actif")
        print("‚èπÔ∏è Appuyez sur Ctrl+C pour arr√™ter")
        print("-" * 40)

        for line in process.stdout:
            print(line.rstrip())

        return_code = process.wait()

        if return_code == 0:
            print("‚úÖ Agent arr√™t√© proprement")
        else:
            print(f"‚ö†Ô∏è Agent arr√™t√© avec code {return_code}")

        return return_code == 0

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
        if 'process' in locals():
            process.terminate()
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        print("üîÑ Tentative avec m√©thode alternative...")
        try:
            os.chdir('ai_trader')
            cmd = [sys.executable, 'main.py']
            subprocess.run(cmd)
            return True
        except Exception as e2:
            print(f"‚ùå M√©thode alternative √©chou√©e: {e2}")
            return False

def main() -> None:
    """Point d'entr√©e"""
    parser = argparse.ArgumentParser(description="Lance AI-Trader-v2")
    parser.add_argument(
        "--enable-dashboard",
        action="store_true",
        help="D√©marrer le dashboard web",
    )
    args = parser.parse_args()
    success = start_agent(enable_dashboard=args.enable_dashboard)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
